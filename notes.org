* Inbox
<<<<<<< HEAD
** [2023-02-01 Ср 10:26] return only a pointer but whole structure allocates
  return (person_t*)malloc(sizeof(person_t));

  all this done for a one call;

[[file:~/repo/extremeC/ch08-inheritance-and-polymorphism/ExtremeC_examples_chapter8_2_person.c::return (person_t*)malloc(sizeof(person_t));]]
** [2022-12-01 Чт 11:55] odd allocation
    context.addr = (struct client_addr_t*)

[[file:~/repo/extremeC/ch20-socket-programming/server/srvcore/datagram_server_core.c::context.addr = (struct client_addr_t*)]]
** [2022-11-30 Ср 14:32] Here is request callback which is responsible for writing the respond

[[file:~/repo/extremeC/ch20-socket-programming/server/srvcore/common_server_core.c::void request_callback(void* obj, struct calc_proto_req_t req) {]]
** [2022-04-12 Вт 16:00] The option "--wrap=rand" tells the linker to update the entry for the symbol "ran" in the final executable's symbol table, which is going to refer to the definition of the __weap_rand function
int __wrap_rand() {

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_2_cmocka_tests_with_stub.c::int __wrap_rand() {]]
** [2022-04-12 Вт 15:58] substitute of the function wich made by "-Wl,--wrap=rand" in gcc compiler
int __wrap_rand() {

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_2_cmocka_tests_with_stub.c::int __wrap_rand() {]]
** [2022-04-12 Вт 15:33] assert_int_equal instead of using an ordinary assert call allows CMocka to print a helpful message in the execution log instead of just terminating the program
  assert_int_equal(next_even_number(), 1);

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1_cmocka_tests.c::assert_int_equal(next_even_number(), 1);]]
** [2022-04-12 Вт 15:07] In addition to test case functions, you see two new functions: setup and tear_down. As we said before, these functions are called test fixtures. Test fixtures are called before and after every test case and their responsibility is to set up and tead down the test case.
int setup(void** state) {

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1_cmocka_tests.c::int setup(void** state) {]]
** [2022-04-12 Вт 15:04] In CMocka, every test case should return void and receive a void** argument. The pointer argument will be used to receive a piece of information, called a state, which is specific to a test case.
void calc_factorial__fact_of_zero_is_one(void** state) {

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1_cmocka_tests.c::void calc_factorial__fact_of_zero_is_one(void** state) {]]
** [2022-04-12 Вт 14:57] so prototype is void func(void** state) but somehow it is get called without "state" arg. wtf?
    cmocka_unit_test(next_even_number__even_numbers_should_be_returned),

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1_cmocka_tests.c::cmocka_unit_test(next_even_number__even_numbers_should_be_returned),]]
** [2022-04-12 Вт 13:57] looks like forward declaration causer there is no included header
void TESTCASE_next_even_number__even_numbers_should_be_returned();

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1_tests.c::void TESTCASE_next_even_number__even_numbers_should_be_returned();]]
** [2022-04-12 Вт 09:44] How to define a pointer to a function
typedef int64_t (*int64_feed_t)();

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1.h::typedef int64_t (*int64_feed_t)();]]
** [2022-04-12 Вт 09:40] call to function poniter
int64_t calc_factorial(int64_feed_t feed) {

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1.c::int64_t calc_factorial(int64_feed_t feed) {]]
** [2022-04-12 Вт 09:27] As you can see, the function calc_factorial accepts a function pointer that returns an integer. It will use the function pointer in order to read an integer and calculate its factorial.
int64_t calc_factorial(int64_feed_t feed);

[[file:~/repo/extremeC/ch22-unit-testing-and-debugging/ExtremeC_examples_chapter22_1.h::int64_t calc_factorial(int64_feed_t feed);]]
** [2022-04-10 Вс 17:02] looks like defining global instance of cstack_type
typedef struct cstack_type cstack_t;

[[file:~/repo/Extreme-C/ch21-integration-with-other-languages/cstack.h::typedef struct cstack_type cstack_t;]]
** [2022-04-02 Сб 08:18] look at this. returned result value from function compared directly
  if (ftruncate(shm_fd, SH_SIZE * sizeof(char)) < 0) {

[[file:~/repo/Extreme-C/ch17-process-execution/ExtremeC_examples_chapter17_4.c::if (ftruncate(shm_fd, SH_SIZE * sizeof(char)) < 0) {]]
** [2022-03-14 Пн 22:16] how to hande function pointers in function's library
polar_pos_2d_t (*func_ptr)(cartesian_pos_2d_t*);

[[file:~/repo/Extreme-C/ch03-object-files/ExtremeC_examples_chapter3_4.c::polar_pos_2d_t (*func_ptr)(cartesian_pos_2d_t*);]]
=======
** [2022-04-11 Пн 13:10] we let the loader know where it shoould look for  the shared objects
LD_LIBRARY_PATH=$PWD/.. ./cstack_cpp.out

[[file:~/repo/extremeC/ch21-integration-with-other-languages/c++/run_linux.sh::LD_LIBRARY_PATH=$PWD/.. ./cstack_cpp.out]]
** [2022-04-11 Пн 09:21] will be linked also at the directory above
L$PWD/..
[[file:~/repo/extremeC/ch21-integration-with-other-languages/c++/build_linux.sh::L$PWD/..]]
** [2022-04-11 Пн 09:19] Where to find include directories persisted in the code
-I$PWD/..
[[file:~/repo/extremeC/ch21-integration-with-other-languages/c++/build_linux.sh::-I$PWD/..]]
** [2022-04-08 Пт 14:54] response structure
struct calc_proto_resp_t {

[[file:~/repo/extremeC/ch20-socket-programming/calcser/calc_proto_resp.h::struct calc_proto_resp_t {]]
** [2022-04-07 Чт 11:26] look how to serialize double
void _serialize_double(char* str, double num) {

[[file:~/repo/extremeC/ch20-socket-programming/calcser/calc_proto_ser.c::void _serialize_double(char* str, double num) {]]
** [2022-04-07 Чт 09:56] look like function prototype
typedef void (*req_cb_t)(

[[file:~/repo/extremeC/ch20-socket-programming/calcser/calc_proto_ser.h::typedef void (*req_cb_t)(]]
** [2022-03-23 Ср 14:40] incompleteness!!!
  // We have to have a pointer here since the type
  // person_t is incomplete.
  struct person_t* person;

[[file:~/repo/extremeC/ch08-inheritance-and-polymorphism/ExtremeC_examples_chapter8_3_student.c::// We have to have a pointer here since the type
 // person_t is incomplete.
 struct person_t* person;]]
** [2022-03-22 Вт 14:16] You cannot even declare a variable out of it !!! (loot at the book)
  struct list_t* list1 = list_malloc();

[[file:~/repo/extremeC/ch06-oop-and-encapsulation/ExtremeC_examples_chapter6_3_main.c::struct list_t* list1 = list_malloc();]]
** [2022-03-18 Пт 10:06] address of ptr and memory allocated there
  printf("Address of ptr1: %p\n", (void*)&ptr1);
  printf("Memory allocated by malloc at %p: ", (void*)ptr1);

[[file:~/repo/extremeC/ch05-stack-and-heap/ExtremeC_examples_chapter5_3.c::printf("Address of ptr1: %p\n", (void*)&ptr1);
 printf("Memory allocated by malloc at %p: ", (void*)ptr1);]]
>>>>>>> faa115c67f58e549d4fdb256f234079033ecb0e8
** [2022-03-08 Вт 10:25] look at that. some enhanced iteration process
  for (int i = 0; i < sizeof(*var); i++, ptr++) {

[[file:~/repo/Extreme-C/ch01-essential-features/ExtremeC_examples_chapter1_21.c::for (int i = 0; i < sizeof(*var); i++, ptr++) {]]
